<?php
namespace Aventura\Diary\Bookable\Availability\Timetable\Rule;

use \Aventura\Diary\DateTime;
use \Aventura\Diary\DateTime\Duration;
use \Aventura\Diary\DateTime\Period;
use \PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-25 at 10:01:23.
 */
class WeekNumRangeRuleTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var WeekNumRangeRule
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new WeekNumRangeRule(7, 9);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\WeekNumRangeRule::obeys
     */
    public function testObeysPeriodInRange()
    {
        // Period vars
        $start = DateTime::fromString('23 Feb 2016');
        $duration = Duration::days(5);
        // Period and assertion
        $period = new Period($start, $duration);
        $this->assertTrue( $this->object->obeys($period) );
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\WeekNumRangeRule::obeys
     */
    public function testObeysPeriodOutOfRangeBefore()
    {
        // Period vars
        $start = DateTime::fromString('20 Jan 2016');
        $duration = Duration::days(8);
        // Period and assertion
        $period = new Period($start, $duration);
        $this->assertFalse( $this->object->obeys($period) );
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\WeekNumRangeRule::obeys
     */
    public function testObeysPeriodOutOfRangeAfter()
    {
        // Period vars
        $start = DateTime::fromString('10 March 2016');
        $duration = Duration::days(8);
        // Period and assertion
        $period = new Period($start, $duration);
        $this->assertFalse( $this->object->obeys($period) );
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\WeekNumRangeRule::obeys
     */
    public function testObeysPeriodStartInRangeEndOutOfRange()
    {
        // Period vars
        $start = DateTime::fromString('25 Feb 2016');
        $duration = Duration::weeks(2);
        // Period and assertion
        $period = new Period($start, $duration);
        $this->assertFalse( $this->object->obeys($period) );
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\WeekNumRangeRule::obeys
     */
    public function testObeysPeriodStartOutOfRangeEndInRange()
    {
        // Period vars
        $start = DateTime::fromString('5 Feb 2016');
        $duration = Duration::days(20);
        // Period and assertion
        $period = new Period($start, $duration);
        $this->assertFalse( $this->object->obeys($period) );
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\WeekNumRangeRule::obeys
     */
    public function testObeysPeriodStartBeforeRangeEndAfterRange()
    {
        // Period vars
        $start = DateTime::fromString('5 Jan 2016');
        $duration = Duration::weeks(10);
        // Period and assertion
        $period = new Period($start, $duration);
        $this->assertFalse( $this->object->obeys($period) );
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\WeekNumRangeRule::obeys
     */
    public function testObeysPeriodStartOnRangeStartEndOnRangeEnd()
    {
        // Period vars
        $start = DateTime::fromString('15 Feb 2016');
        $duration = Duration::weeks(3)->plus(Duration::seconds(1));
        // Period and assertion
        $period = new Period($start, $duration);
        $this->assertFalse( $this->object->obeys($period) );
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\WeekNumRangeRule::obeys
     */
    public function testObeysPeriodStartOnRangeEndInRangeStartInclusive()
    {
        // Period vars
        $start = DateTime::fromString('15 Feb 2016');
        $duration = Duration::weeks(2);
        // Period and assertion
        $period = new Period($start, $duration);
        $this->assertTrue( $this->object->obeys($period) );
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\WeekNumRangeRule::obeys
     */
    public function testObeysPeriodStartOnRangeEndInRangeStartExclusive()
    {
        $this->object->setLowerInclusive(false);
        // Period vars
        $start = DateTime::fromString('15 Feb 2016');
        $duration = Duration::weeks(2);
        // Period and assertion
        $period = new Period($start, $duration);
        $this->assertFalse( $this->object->obeys($period) );
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\WeekNumRangeRule::obeys
     */
    public function testObeysPeriodStartInRangeEndOnRangeEndExclusive()
    {
        $this->object->setUpperInclusive(false);
        // Period vars
        $start = DateTime::fromString('25 Feb 2016');
        $duration = Duration::days(4)->plus(Duration::seconds(1));
        // Period and assertion
        $period = new Period($start, $duration);
        $this->assertFalse( $this->object->obeys($period) );
    }
    
}
