<?php
namespace Aventura\Diary\Bookable\Availability\Timetable\Rule;

use \Aventura\Diary\DateTime;
use \Aventura\Diary\DateTime\Day;
use \Aventura\Diary\DateTime\Duration;
use \Aventura\Diary\DateTime\Period;
use \PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-25 at 13:01:54.
 */
class DotwRangeRuleTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var DotwRangeRule
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DotwRangeRule(Day::TUESDAY, Day::THURSDAY);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    protected function assertObeys($obeys, $start, $duration)
    {
        $period = new Period($start, $duration);
        $this->assertEquals($obeys, $this->object->obeys($period));
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysStartInRangeEndInRangeStartInclusiveEndInclusive()
    {
        // Period vars
        $start = DateTime::fromString('23 Feb 2016');
        $duration = Duration::days(1);
        // Inclusive options
        $this->object->setLowerInclusive(true);
        $this->object->setUpperInclusive(true);
        // Should it obey the range?
        $obeys = true;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysStartBeforeRangeEndBeforeRangeStartInclusiveEndInclusive()
    {
        // Period vars
        $start = DateTime::fromString('22 Feb 2016');
        $duration = Duration::hours(2);
        // Inclusive options
        $this->object->setLowerInclusive(true);
        $this->object->setUpperInclusive(true);
        // Should it obey the range?
        $obeys = false;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysStartAfterRangeEndAfterRangeStartInclusiveEndInclusive()
    {
        // Period vars
        $start = DateTime::fromString('26 Feb 2016');
        $duration = Duration::days(2);
        // Inclusive options
        $this->object->setLowerInclusive(true);
        $this->object->setUpperInclusive(true);
        // Should it obey the range?
        $obeys = false;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysStartInRangeEndAfterRangeStartInclusiveEndInclusive()
    {
        // Period vars
        $start = DateTime::fromString('24 Feb 2016');
        $duration = Duration::days(3);
        // Inclusive options
        $this->object->setLowerInclusive(true);
        $this->object->setUpperInclusive(true);
        // Should it obey the range?
        $obeys = false;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysStartBeforeRangeEndInRangeStartInclusiveEndInclusive()
    {
        // Period vars
        $start = DateTime::fromString('21 Feb 2016');
        $duration = Duration::days(4);
        // Inclusive options
        $this->object->setLowerInclusive(true);
        $this->object->setUpperInclusive(true);
        // Should it obey the range?
        $obeys = false;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysStartOnRangeEndOnRangeStartInclusiveEndInclusive()
    {
        // Period vars
        $start = DateTime::fromString('23 Feb 2016');
        $duration = Duration::days(3);
        // Inclusive options
        $this->object->setLowerInclusive(true);
        $this->object->setUpperInclusive(true);
        // Should it obey the range?
        $obeys = true;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysStartOnRangeEndOnRangeStartExclusiveEndInclusive()
    {
        // Period vars
        $start = DateTime::fromString('23 Feb 2016');
        $duration = Duration::days(3);
        // Inclusive options
        $this->object->setLowerInclusive(false);
        $this->object->setUpperInclusive(true);
        // Should it obey the range?
        $obeys = false;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysStartOnRangeEndOnRangeStartInclusiveEndExclusive()
    {
        // Period vars
        $start = DateTime::fromString('23 Feb 2016');
        $duration = Duration::days(3);
        // Inclusive options
        $this->object->setLowerInclusive(true);
        $this->object->setUpperInclusive(false);
        // Should it obey the range?
        $obeys = false;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysStartOnRangeEndOnRangeStartExclusiveEndExclusive()
    {
        // Period vars
        $start = DateTime::fromString('23 Feb 2016');
        $duration = Duration::days(3);
        // Inclusive options
        $this->object->setLowerInclusive(false);
        $this->object->setUpperInclusive(false);
        // Should it obey the range?
        $obeys = false;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysPeriodOverlapsRange()
    {
        // Period vars
        $start = DateTime::fromString('25 Feb 2016');
        $duration = Duration::days(6);
        // Inclusive options
        $this->object->setLowerInclusive(true);
        $this->object->setUpperInclusive(true);
        // Should it obey the range?
        $obeys = false;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysRangeInvertedPeriodOverlapsRange()
    {
        // Period vars
        $start = DateTime::fromString('25 Feb 2016');
        $duration = Duration::days(6);
        // Reverse Range
        $this->object->setLower(Day::THURSDAY);
        $this->object->setUpper(Day::TUESDAY);
        // Inclusive options
        $this->object->setLowerInclusive(true);
        $this->object->setUpperInclusive(true);
        // Should it obey the range?
        $obeys = true;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysRangeInvertedPeriodOverlapsRangeStartExclusive()
    {
        // Period vars
        $start = DateTime::fromString('25 Feb 2016');
        $duration = Duration::days(6);
        // Reverse Range
        $this->object->setLower(Day::THURSDAY);
        $this->object->setUpper(Day::TUESDAY);
        // Inclusive options
        $this->object->setLowerInclusive(false);
        $this->object->setUpperInclusive(true);
        // Should it obey the range?
        $obeys = false;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
    /**
     * @covers Aventura\Diary\Bookable\Availability\Timetable\Rule\DayOfTheWeekRangeRule::obeys
     */
    public function testObeysRangeInvertedPeriodOverlapsRangeEndExclusive()
    {
        // Period vars
        $start = DateTime::fromString('25 Feb 2016');
        $duration = Duration::days(6);
        // Reverse Range
        $this->object->setLower(Day::THURSDAY);
        $this->object->setUpper(Day::TUESDAY);
        // Inclusive options
        $this->object->setLowerInclusive(true);
        $this->object->setUpperInclusive(false);
        // Should it obey the range?
        $obeys = false;
        // Assertion
        $this->assertObeys($obeys, $start, $duration);
    }
    
}
