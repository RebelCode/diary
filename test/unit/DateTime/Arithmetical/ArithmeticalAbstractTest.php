<?php

namespace Aventura\Diary\DateTime\Arithmetical;

use \Aventura\Diary\Testing\DateTime\Arithmetical\ArithmeticalAbstractMock;
use \PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-23 at 10:06:14.
 */
class ArithmeticalAbstractTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var ArithmeticalAbstract
     */
    protected $p1;
    
    /**
     * @var ArithmeticalAbstract
     */
    protected $p2;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->p1 = new ArithmeticalAbstractMock();
        $this->p2 = new ArithmeticalAbstractMock();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Aventura\Diary\DateTime\Arithmetical\ArithmeticalAbstract::plus
     */
    public function testPlus()
    {
        $this->p1->setArithmeticValue(10);
        $this->p2->setArithmeticValue(55);
        $this->p1->plus($this->p2);
        $this->assertEquals(65, $this->p1->getArithmeticValue());
    }

    /**
     * @covers Aventura\Diary\DateTime\Arithmetical\ArithmeticalAbstract::minus
     * @todo   Implement testMinus().
     */
    public function testMinus()
    {
        $this->p1->setArithmeticValue(23);
        $this->p2->setArithmeticValue(3);
        $this->p1->minus($this->p2);
        $this->assertEquals(20, $this->p1->getArithmeticValue());
    }

    /**
     * @covers Aventura\Diary\DateTime\Arithmetical\ArithmeticalAbstract::mult
     * @todo   Implement testMult().
     */
    public function testMult()
    {
        $this->p1->setArithmeticValue(5);
        $this->p2->setArithmeticValue(6);
        $this->p1->mult($this->p2);
        $this->assertEquals(30, $this->p1->getArithmeticValue());
    }

    /**
     * @covers Aventura\Diary\DateTime\Arithmetical\ArithmeticalAbstract::divide
     * @todo   Implement testDivide().
     */
    public function testDivide()
    {
        $this->p1->setArithmeticValue(100);
        $this->p2->setArithmeticValue(20);
        $this->p1->divide($this->p2);
        $this->assertEquals(5, $this->p1->getArithmeticValue());
    }

}
