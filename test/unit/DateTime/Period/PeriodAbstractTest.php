<?php
namespace Aventura\Diary\DateTime\Period;

use \Aventura\Diary\DateTime;
use \Aventura\Diary\Testing\DateTime\Period\PeriodAbstractMock;
use \PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-23 at 13:40:32.
 */
class PeriodAbstractTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var PeriodAbstract
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Aventura\Diary\DateTime\Period\PeriodAbstract::isEqualTo
     */
    public function testIsEqualToWhenEqual()
    {
        $this->object = new PeriodAbstractMock(new DateTime(100), new DateTime(200));
        $other = new PeriodAbstractMock(new DateTime(100), new DateTime(200));
        $this->assertTrue($this->object->isEqualTo($other));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Period\PeriodAbstract::isEqualTo
     */
    public function testIsEqualToWhenNotEqual()
    {
        $this->object = new PeriodAbstractMock(new DateTime(100), new DateTime(200));
        $other = new PeriodAbstractMock(new DateTime(123), new DateTime(456));
        $this->assertFalse($this->object->isEqualTo($other));
    }

    /**
     * A ┌──┐
     * B        └──┘
     * @covers Aventura\Diary\DateTime\Period\PeriodAbstract::overlaps
     */
    public function testOverlapsWhenABeforeB()
    {
        $this->object = new PeriodAbstractMock(new DateTime(100), new DateTime(199));
        $other = new PeriodAbstractMock(new DateTime(200), new DateTime(300));
        $this->assertFalse($this->object->overlaps($other));
    }
    
    /**
     * A ┌──┐
     * B      └──┘
     * @covers Aventura\Diary\DateTime\Period\PeriodAbstract::overlaps
     */
    public function testOverlapsWhenAEndsOnBStart()
    {
        $this->object = new PeriodAbstractMock(new DateTime(100), new DateTime(200));
        $other = new PeriodAbstractMock(new DateTime(200), new DateTime(300));
        $this->assertTrue($this->object->overlaps($other));
    }
    
    /**
     * A ┌──┐
     * B    └──┘
     * @covers Aventura\Diary\DateTime\Period\PeriodAbstract::overlaps
     */
    public function testOverlapsWhenAEndsDuringB()
    {
        $this->object = new PeriodAbstractMock(new DateTime(150), new DateTime(250));
        $other = new PeriodAbstractMock(new DateTime(200), new DateTime(300));
        $this->assertTrue($this->object->overlaps($other));
    }
    
    /**
     * A ┌──┐
     * B └──┘
     * @covers Aventura\Diary\DateTime\Period\PeriodAbstract::overlaps
     */
    public function testOverlapsWhenAEqualToB()
    {
        $this->object = new PeriodAbstractMock(new DateTime(200), new DateTime(300));
        $other = new PeriodAbstractMock(new DateTime(200), new DateTime(300));
        $this->assertTrue($this->object->overlaps($other));
    }
    
    /**
     * A    ┌──┐
     * B └──┘
     * @covers Aventura\Diary\DateTime\Period\PeriodAbstract::overlaps
     */
    public function testOverlapsWhenAStartsDuringB()
    {
        $this->object = new PeriodAbstractMock(new DateTime(250), new DateTime(350));
        $other = new PeriodAbstractMock(new DateTime(200), new DateTime(300));
        $this->assertTrue($this->object->overlaps($other));
    }
    
    /**
     * A      ┌──┐
     * B └──┘
     * @covers Aventura\Diary\DateTime\Period\PeriodAbstract::overlaps
     */
    public function testOverlapsWhenAStartsOnBEnd()
    {
        $this->object = new PeriodAbstractMock(new DateTime(200), new DateTime(300));
        $other = new PeriodAbstractMock(new DateTime(100), new DateTime(200));
        $this->assertTrue($this->object->overlaps($other));
    }
    
    /**
     * A        ┌──┐
     * B └──┘
     * @covers Aventura\Diary\DateTime\Period\PeriodAbstract::overlaps
     */
    public function testOverlapsWhenAAfterB()
    {
        $this->object = new PeriodAbstractMock(new DateTime(250), new DateTime(350));
        $other = new PeriodAbstractMock(new DateTime(100), new DateTime(200));
        $this->assertFalse($this->object->overlaps($other));
    }
    
    /**
     * A    ┌─┐
     * B └─────┘
     * @covers Aventura\Diary\DateTime\Period\PeriodAbstract::overlaps
     */
    public function testOverlapsWhenAInB()
    {
        $this->object = new PeriodAbstractMock(new DateTime(200), new DateTime(300));
        $other = new PeriodAbstractMock(new DateTime(100), new DateTime(500));
        $this->assertTrue($this->object->overlaps($other));
    }
    
    /**
     * A ┌─────┐
     * B   └──┘
     * @covers Aventura\Diary\DateTime\Period\PeriodAbstract::overlaps
     */
    public function testOverlapsWhenBInA()
    {
        $this->object = new PeriodAbstractMock(new DateTime(200), new DateTime(800));
        $other = new PeriodAbstractMock(new DateTime(400), new DateTime(500));
        $this->assertTrue($this->object->overlaps($other));
    }
    
}
