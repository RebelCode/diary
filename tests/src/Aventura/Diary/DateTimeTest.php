<?php
namespace Aventura\Diary;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-24 at 10:03:14.
 */
class DateTimeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DateTime
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DateTime(123456);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Aventura\Diary\DateTime::getTimestamp
     */
    public function testGetTimestamp()
    {
        $this->assertEquals(123456, $this->object->getTimestamp());
    }

    /**
     * @covers Aventura\Diary\DateTime::setTimestamp
     */
    public function testSetTimestamp()
    {
        $this->object->setTimestamp(987654);
        $this->assertEquals(987654, $this->object->getTimestamp());
    }

    /**
     * @covers Aventura\Diary\DateTime::copy
     */
    public function testCopy()
    {
        $copy = $this->object->copy();
        $this->assertTrue($this->object->isEqualTo($copy));
    }

    /**
     * @covers Aventura\Diary\DateTime::format
     */
    public function testFormat()
    {
        $format = 'D, M, Y --- H:i:s';
        $expected = gmdate($format, 123456);
        $this->assertEquals($expected, $this->object->format($format));
    }

    /**
     * @covers Aventura\Diary\DateTime::__toString
     */
    public function test__toString()
    {
        $this->assertEquals($this->object->format(DateTime::TO_STRING_FORMAT), $this->object->__toString());
    }

    /**
     * @covers Aventura\Diary\DateTime::now
     */
    public function testNow()
    {
        $now = new DateTime(intval(\gmdate('U')));
        $this->assertTrue(DateTime::now()->isEqualTo($now));
    }

    /**
     * @covers Aventura\Diary\DateTime::nowTimestamp
     */
    public function testNowTimestamp()
    {
        $this->assertEquals(intval(\gmdate('U')), DateTime::nowTimestamp());
    }

    /**
     * @covers Aventura\Diary\DateTime::fromString
     */
    public function testFromString()
    {
        $str = '2 Jan 1970 10:17:36';
        $expected = \strtotime($str);
        $this->assertEquals($expected, DateTime::fromString($str)->getTimestamp());
    }
    
    /**
     * @covers Aventura\Diary\DateTime::fromString
     */
    public function testFromStringNow()
    {
        $str = '+1 day 10 minutes';
        $expected = \strtotime($str, 123456);
        $this->assertEquals($expected, DateTime::fromString($str, 123456)->getTimestamp());
    }
    
}
