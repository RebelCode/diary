<?php
namespace Aventura\Diary\DateTime;

use \Aventura\Diary\DateTime;
use \PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-24 at 09:21:28.
 */
class PeriodTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Period
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Period(new DateTime(123), Duration::minutes(5));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Aventura\Diary\DateTime\Period::getStart
     */
    public function testGetStart()
    {
        $this->assertTrue($this->object->getStart()->isEqualTo(new DateTime(123)));
    }

    /**
     * @covers Aventura\Diary\DateTime\Period::getDuration
     */
    public function testGetDuration()
    {
        $this->assertTrue($this->object->getDuration()->isEqualTo(Duration::minutes(5)));
    }

    /**
     * @covers Aventura\Diary\DateTime\Period::getEnd
     */
    public function testGetEnd()
    {
        $start = $this->object->getStart()->copy();
        $calculatedEnd = $start->plus(Duration::minutes(5))->minus(Duration::seconds(1));
        $this->assertTrue($calculatedEnd->isEqualTo($this->object->getEnd()));
    }

    /**
     * @covers Aventura\Diary\DateTime\Period::setStart
     */
    public function testSetStart()
    {
        $newStart = DateTime::fromString('15 Jan 2020');
        $this->object->setStart($newStart);
        $this->assertTrue($this->object->getStart()->isEqualTo($newStart));
    }

    /**
     * @covers Aventura\Diary\DateTime\Period::setDuration
     */
    public function testSetDuration()
    {
        $newDuration = Duration::hours(12);
        $this->object->setDuration($newDuration);
        $this->assertTrue($this->object->getDuration()->isEqualTo($newDuration));
    }

    /**
     * @covers Aventura\Diary\DateTime\Period::format
     */
    public function testFormatStart()
    {
        $format = 'Starts at: %s';
        $expected = \sprintf('Starts at: %s', $this->object->getStart());
        $this->assertEquals($expected, $this->object->format($format));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Period::format
     */
    public function testFormatDuration()
    {
        $format = 'Duration: %d';
        $expected = \sprintf('Duration: %s', $this->object->getDuration());
        $this->assertEquals($expected, $this->object->format($format));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Period::format
     */
    public function testFormatEnd()
    {
        $format = 'Ends at: %e';
        $expected = \sprintf('Ends at: %s', $this->object->getEnd());
        $this->assertEquals($expected, $this->object->format($format));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Period::format
     */
    public function testFormatStartDuration()
    {
        $format = 'Starts at: %s, Duration: %d';
        $expected = \sprintf('Starts at: %s, Duration: %s',
                $this->object->getStart(), $this->object->getDuration());
        $this->assertEquals($expected, $this->object->format($format));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Period::format
     */
    public function testFormatStartEnd()
    {
        $format = 'Starts at: %s. Ends at: %e';
        $expected = \sprintf('Starts at: %s. Ends at: %s',
                $this->object->getStart(), $this->object->getEnd());
        $this->assertEquals($expected, $this->object->format($format));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Period::format
     */
    public function testFormatDurationEnd()
    {
        $format = 'Duration: %s. Ends at: %e';
        $expected = \sprintf('Duration: %s. Ends at: %s',
                $this->object->getStart(), $this->object->getEnd());
        $this->assertEquals($expected, $this->object->format($format));
    }

    /**
     * @covers Aventura\Diary\DateTime\Period::__toString
     */
    public function test__toString()
    {
        $this->assertEquals($this->object->format('%s, %d'), $this->object->__toString());
    }
    
}
