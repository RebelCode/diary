<?php
namespace Aventura\Diary\DateTime\Comparable;

use \Aventura\Diary\Testing\DateTime\Comparable\ComparableMock;
use \PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-23 at 12:19:24.
 */
class ComparableAbstractTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var ComparableMock
     */
    protected $p1;
    
    /**
     * @var ComparableMock
     */
    protected $p2;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->p1 = new ComparableMock(0);
        $this->p2 = new ComparableMock(0);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::compareTo
     */
    public function testCompareToEqual()
    {
        $this->p1->setArithmeticValue(123);
        $this->p2->setArithmeticValue(123);
        $this->assertEquals(0, $this->p1->compareTo($this->p2));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::compareTo
     */
    public function testCompareToPositive()
    {
        $this->p1->setArithmeticValue(150);
        $this->p2->setArithmeticValue(85);
        $this->assertEquals(1, $this->p1->compareTo($this->p2));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::compareTo
     */
    public function testCompareToNegative()
    {
        $this->p1->setArithmeticValue(50);
        $this->p2->setArithmeticValue(96);
        $this->assertEquals(-1, $this->p1->compareTo($this->p2));
    }

    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isBefore
     */
    public function testIsBeforeWhenBefore()
    {
        $this->p1->setArithmeticValue(145);
        $this->p2->setArithmeticValue(800);
        $this->assertTrue($this->p1->isBefore($this->p2));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isBefore
     */
    public function testIsBeforeWhenAfter()
    {
        $this->p1->setArithmeticValue(920);
        $this->p2->setArithmeticValue(800);
        $this->assertFalse($this->p1->isBefore($this->p2));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isBefore
     */
    public function testIsBeforeWhenEqual()
    {
        $this->p1->setArithmeticValue(800);
        $this->p2->setArithmeticValue(800);
        $this->assertFalse($this->p1->isBefore($this->p2));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isBefore
     */
    public function testIsBeforeOrEqualWhenEqual()
    {
        $this->p1->setArithmeticValue(800);
        $this->p2->setArithmeticValue(800);
        $this->assertTrue($this->p1->isBefore($this->p2, true));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isBefore
     */
    public function testIsBeforeOrEqualWhenBefore()
    {
        $this->p1->setArithmeticValue(290);
        $this->p2->setArithmeticValue(800);
        $this->assertTrue($this->p1->isBefore($this->p2, true));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isBefore
     */
    public function testIsBeforeOrEqualWhenAfter()
    {
        $this->p1->setArithmeticValue(920);
        $this->p2->setArithmeticValue(800);
        $this->assertFalse($this->p1->isBefore($this->p2, true));
    }

    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isAfter
     */
    public function testIsAfterWhenAfter()
    {
        $this->p1->setArithmeticValue(920);
        $this->p2->setArithmeticValue(800);
        $this->assertTrue($this->p1->isAfter($this->p2));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isAfter
     */
    public function testIsAfterWhenBefore()
    {
        $this->p1->setArithmeticValue(150);
        $this->p2->setArithmeticValue(600);
        $this->assertFalse($this->p1->isAfter($this->p2));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isAfter
     */
    public function testIsAfterWhenEqual()
    {
        $this->p1->setArithmeticValue(400);
        $this->p2->setArithmeticValue(400);
        $this->assertFalse($this->p1->isAfter($this->p2));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isAfter
     */
    public function testIsAfterOrEqualWhenAfter()
    {
        $this->p1->setArithmeticValue(730);
        $this->p2->setArithmeticValue(400);
        $this->assertTrue($this->p1->isAfter($this->p2, true));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isAfter
     */
    public function testIsAfterOrEqualWhenBefore()
    {
        $this->p1->setArithmeticValue(100);
        $this->p2->setArithmeticValue(400);
        $this->assertFalse($this->p1->isAfter($this->p2, true));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isAfter
     */
    public function testIsAfterOrEqualWhenEqual()
    {
        $this->p1->setArithmeticValue(100);
        $this->p2->setArithmeticValue(100);
        $this->assertTrue($this->p1->isAfter($this->p2, true));
    }

    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isEqualTo
     */
    public function testIsEqualToWhenEqual()
    {
        $this->p1->setArithmeticValue(100);
        $this->p2->setArithmeticValue(100);
        $this->assertTrue($this->p1->isEqualTo($this->p2));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Comparable\ComparableAbstract::isEqualTo
     */
    public function testIsEqualToWhenNotEqual()
    {
        $this->p1->setArithmeticValue(100);
        $this->p2->setArithmeticValue(50);
        $this->assertFalse($this->p1->isEqualTo($this->p2));
    }
    
}
