<?php
namespace Aventura\Diary\DateTime\Duration;

use \Aventura\Diary\Testing\DateTime\Duration\DurationAbstractMock;
use \PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-23 at 13:30:03.
 */
class DurationAbstractTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var DurationAbstract
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DurationAbstractMock(0);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Aventura\Diary\DateTime\Duration\DurationAbstract::isEqualTo
     */
    public function testIsEqualTo()
    {
        $this->object = new DurationAbstractMock(50);
        $other = new DurationAbstractMock(50);
        $this->assertTrue($this->object->isEqualTo($other));
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Duration\DurationAbstract::isEqualTo
     */
    public function testIsEqualToWhenNotEqual()
    {
        $this->object = new DurationAbstractMock(50);
        $other = new DurationAbstractMock(80);
        $this->assertFalse($this->object->isEqualTo($other));
    }

    /**
     * @covers Aventura\Diary\DateTime\Duration\DurationAbstract::getArithmeticValue
     */
    public function testGetArithmeticValue()
    {
        $value = 60;
        $this->object = new DurationAbstractMock($value);
        $this->assertEquals($value, $this->object->getArithmeticValue());
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Duration\DurationAbstract::getArithmeticValue
     */
    public function testGetSeconds()
    {
        $value = 60;
        $this->object = new DurationAbstractMock($value);
        $this->assertEquals($value, $this->object->getSeconds());
    }

    /**
     * @covers Aventura\Diary\DateTime\Duration\DurationAbstract::setArithmeticValue
     */
    public function testSetArithmeticValue()
    {
        $value = 560;
        $this->object->setArithmeticValue($value);
        $this->assertEquals($value, $this->object->getArithmeticValue());
    }
    
    /**
     * @covers Aventura\Diary\DateTime\Duration\DurationAbstract::setArithmeticValue
     */
    public function testSetSeconds()
    {
        $value = 560;
        $this->object->setSeconds($value);
        $this->assertEquals($value, $this->object->getSeconds());
    }
    
}
